var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function products() {
    let productContainer = document.querySelector('.all-products');
    let categoryContainer = document.querySelector('.all-products__categories');
    if (productContainer) {
        // Function for Call the All Products
        async function showProducts() {
            const allProductsContainer = document.querySelector('.all-products__container__product');
            try {
                await fetch('http://localhost:5000/products').then((response)=>response.json()
                ).then((data)=>data.map((product)=>{
                        // console.log(product);
                        const getAllProducts = `\n                        <div class="single-product" data-id="${product.category}">\n                            <h5>${product.name.substring(0, 20)}</h5>\n                            <img src="../..${product.imageURL}" alt="${product.name}">\n                            <p class="descriptions">${product.description.substring(0, 100)}</p>\n                            <div class="productBottom">\n                                <p>Rs <span class="price">${product.price}</span></p>\n                                <a href="#" class="btn-primary">Buy Now</a>\n                            </div>\n                        </div>\n                      `;
                        allProductsContainer.insertAdjacentHTML('beforeend', getAllProducts);
                    })
                );
            } catch (err) {
                console.log(err);
            }
        }
        showProducts();
        // Function for Call the All Categories
        async function showCategories() {
            try {
                await fetch('http://localhost:5000/categories').then((response)=>response.json()
                ).then((data)=>data.map((category)=>{
                        // console.log(category);
                        const getAllCategories = `\n                        <li><a href="#" class="filter" data-id="${category.id}">${category.name}</a></li>\n                        `;
                        categoryContainer.insertAdjacentHTML('beforeend', getAllCategories);
                    })
                );
            } catch (err) {
                console.log(err);
            }
            // Function for Filter the Products
            let categoryClasses = document.querySelectorAll('.filter');
            let singleProduct = document.querySelectorAll('.single-product');
            function filter() {
                for(let i = 0; i < categoryClasses.length; i++)categoryClasses[i].addEventListener('click', (e)=>{
                    e.preventDefault();
                    const filter1 = e.target.dataset.id;
                    //console.log(filter);
                    singleProduct.forEach((product)=>{
                        // console.log(typeof product)
                        // for (const singleItem in product) {
                        //     console.log(`${product[singleItem]}`);
                        // }
                        if (filter1 === 'all') product.style.display = 'block';
                        else if (filter1 !== 'all' || product.getAttribute('data-id') !== filter1) alert('No');
                        else if (product.getAttribute('data-id') == filter1) product.style.display = 'block';
                        else product.style.display = 'none';
                    });
                });
            }
            filter();
        }
        showCategories();
    }
}
exports.default = products;
